% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consume.R
\name{amqp_consume_later}
\alias{amqp_consume_later}
\title{Consume Messages from a Queue, Later}
\usage{
amqp_consume_later(conn, queue, fun, tag = "", no_ack = FALSE,
  exclusive = FALSE, ...)
}
\arguments{
\item{conn}{An object returned by \code{\link{amqp_connect}}, but see
\strong{Details}.}

\item{queue}{The name of a queue.}

\item{fun}{A function taking a single parameter, the message received. This
function is executed by \code{\link[later]{later}} whenever messages are
received on the queue.}

\item{tag}{An optional "tag" to identify the consumer. When empty, the
server will generate one automatically.}

\item{no_ack}{When \code{TRUE}, tell the server not to expect that messages
will be acknowledged.}

\item{exclusive}{When \code{TRUE}, request that this consumer has exclusive
access to the queue.}

\item{...}{Additional arguments, used to declare broker-specific AMQP
extensions. See \strong{Details}.}
}
\description{
Consume messages "asynchronously" by using the machinery of the
\strong{\link[later]{later}} package. This function is primarily for use
inside applications (particularly Shiny applications) that already make use
of \strong{later} to manage events.

This interface is experimental and should be used with caution, since any
bugs in the implementation have the potential to cause serious memory
corruption issues that will terminate the R process.
}
\details{
An \code{amqp_connection} object will start a "background thread" for these
consumers if any are declared. Because underlying components of the
\code{amqp_connection} object are not thread-safe, this background thread
creates a "clone" of the original connection using the same properties. This
may lead to some surprising results, including the fact that consumers
created with this interface will not stop running if the original connection
is closed with \code{amqp_disconnect} or due to connection-level user errors.
This may change in future versions.

At present, consumers can only be cancelled by using
\code{\link{amqp_cancel_consumer}} or by garbage collection when the original
connection object expires.

Messages to background consumers are always acknowledged.
}
\seealso{
\code{\link{amqp_consume}} to consume messages in the main thread.
}
