% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consume.R
\name{amqp_consume}
\alias{amqp_consume}
\alias{amqp_cancel_consumer}
\alias{amqp_listen}
\title{Consume Messages from a Queue}
\usage{
amqp_consume(conn, queue, fun, tag = "", no_ack = FALSE,
  exclusive = FALSE, ...)

amqp_cancel_consumer(consumer)

amqp_listen(conn, timeout = 10L)
}
\arguments{
\item{conn}{An object returned by \code{\link{amqp_connect}}.}

\item{queue}{The name of a queue.}

\item{fun}{A function taking a single parameter, the message received. This
function is executed by \code{amqp_listen()} whenever messages are
received on the queue.}

\item{tag}{An optional "tag" to identify the consumer. When empty, the
server will generate one automatically.}

\item{no_ack}{When \code{TRUE}, tell the server not to expect that messages
will be acknowledged.}

\item{exclusive}{When \code{TRUE}, request that this consumer has exclusive
access to the queue.}

\item{...}{Additional arguments, used to declare broker-specific AMQP
extensions. See \strong{Details}.}

\item{consumer}{An object created by \code{\link{amqp_consume}}.}

\item{timeout}{Maximum number of seconds to wait for messages. Capped at 60.}
}
\value{
\code{amqp_consume} returns an \code{"amqp_consumer"} object, which can
later be used to cancel the consumer. Keep in mind that if you do not assign
the result of this function to a variable, you will have no way of
cancelling the consumer directly -- instead, you will be relying on
\code{\link[base]{gc}} to take care of this at some indeterminate point in
the future.
}
\description{
Start or cancel a \strong{Consumer} for a given queue. Consumers attach a
callback function to the queue that is run once for each message received
(until it is cancelled). Any number of consumers can be started on a given
connection.

Because R is single-threaded, you must call \code{amqp_listen()} to actually
receive and process messages. As an alternative, you can consume messages on
a background thread by using \code{\link{amqp_consume_later}}.
}
\details{
Additional arguments can be used to declare broker-specific extensions. An
incomplete list is as follows:

\describe{

  \item{\code{"x-priority"}}{Specify a consumer
    \href{https://www.rabbitmq.com/consumer-priority.html}{priority}.}

}

Unless \code{no_ack} is \code{TRUE}, messages are acknowledged automatically
after the callback executes. If it fails, messages are nacked instead before
surfacing the underlying error to the caller.
}
\examples{
\dontrun{
# Create a consumer.
conn <- amqp_connect()
queue <- amqp_declare_tmp_queue(conn)
consumer <- amqp_consume(conn, queue, function(msg) {
  print(msg)
})

# Publish and then listen for a message.
amqp_publish(conn, "Hello, world.", routing_key = queue)
amqp_listen(conn, timeout = 1)

# Clean up.
amqp_cancel_consumer(consumer)
amqp_disconnect(conn)
}

}
\seealso{
\code{\link{amqp_get}} to get messages individually or
\code{\link{amqp_consume_later}} to consume messages in a background thread.
}
