% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/queue.R
\name{amqp_queues}
\alias{amqp_queues}
\alias{amqp_declare_queue}
\alias{amqp_declare_tmp_queue}
\alias{amqp_delete_queue}
\title{Declare or Delete Queues}
\usage{
amqp_declare_queue(conn, queue = "", passive = FALSE, durable = FALSE,
  exclusive = FALSE, auto_delete = FALSE, ...)

amqp_declare_tmp_queue(conn, passive = FALSE, exclusive = FALSE, ...)

amqp_delete_queue(conn, queue, if_unused = FALSE, if_empty = FALSE)
}
\arguments{
\item{conn}{An object returned by \code{\link{amqp_connect}}.}

\item{queue}{The name of a queue. If this is empty (the default), the server
will generate a random name for the queue itself.}

\item{passive}{When \code{TRUE}, raise an error if the queue does not already
exist.}

\item{durable}{When \code{TRUE}, the queue will persist between server
restarts.}

\item{exclusive}{When \code{TRUE}, the queue will only be accessible to the
current connection, and will be deleted when that connection closes.}

\item{auto_delete}{When \code{TRUE}, the queue is automatically deleted when
all consumers have finished with it (i.e. their connections have closed).
This does not come into effect until the queue has at least one consumer.}

\item{...}{Additional arguments, used to declare broker-specific AMQP
extensions. See \strong{Details}.}

\item{if_unused}{Delete the queue only if it is unused.}

\item{if_empty}{Delete the queue only if it is empty.}
}
\value{
\code{amqp_declare_tmp_queue()} will return the name of the new,
  temporary queue, while \code{amqp_declare_queue()} will return an object
  containing some additional information.

\code{amqp_delete_queue()} will return the number of messages in the
  queue when it was deleted, invisibly.
}
\description{
AMQP queues store messages that can be consumed by clients. They must be
declared before use and \link[=amqp_bindings]{bound} to an
\link[=amqp_exchanges]{exchange} so that messages can be routed to them.

The \code{amqp_declare_tmp_queue()} function is a shortcut for declaring a
non-durable (also called "transient") queue with a server-generated name.

Both \code{amqp_declare_queue()} and \code{amqp_delete_queue()} will raise
errors if there is a problem declaring/deleting the queue.
}
\details{
Additional arguments can be used to declare broker-specific extensions. An
incomplete list is as follows:

\describe{

  \item{\code{"x-dead-letter-exchange"}}{Specify a
    \href{https://www.rabbitmq.com/dlx.html}{dead letter exchange} for the
    queue.}

  \item{\code{"x-dead-letter-routing-key"}}{Specify a
    \href{https://www.rabbitmq.com/dlx.html}{dead letter routing key} for the
    queue.}

  \item{\code{"x-expires"}}{Specify a queue
    \href{https://www.rabbitmq.com/ttl.html}{expiration}, in seconds.}

  \item{\code{"x-max-length"}}{Specify the
    \href{https://www.rabbitmq.com/maxlength.html}{maximum number of messages}
    to store in the queue before it overflows.}

  \item{\code{"x-max-length-bytes"}}{Specify the
    \href{https://www.rabbitmq.com/maxlength.html}{total number of bytes}
    that messages can take up in the queue before it overflows.}

  \item{\code{"x-max-priority"}}{Specify the
    \href{https://www.rabbitmq.com/priority.html}{maximum priority}
    supported by the queue.}

  \item{\code{"x-message-ttl"}}{Specify a message
    \href{https://www.rabbitmq.com/ttl.html}{time-to-live}, in seconds.}

  \item{\code{"x-overflow"}}{Specify queue
    \href{https://www.rabbitmq.com/maxlength.html}{overflow behaviour}.
    Either \code{"drop-head"} (the default) or \code{"reject-publish"}.}

  \item{\code{"x-queue-mode"}}{Specify queue
    \href{https://www.rabbitmq.com/lazy-queues.html}{mode}. Either
    \code{"normal"} (the default) or \code{"lazy"}.}

  \item{\code{"x-single-active-consumer"}}{Specify that the queue can only
    have a \href{https://www.rabbitmq.com/consumers.html#single-active-consumer}{single active consumer}.}

}
}
\examples{
\dontrun{
conn <- amqp_connect()
amqp_declare_queue(conn, "test.queue", auto_delete = TRUE)
amqp_delete_queue(conn, "test.queue")
amqp_disconnect(conn)
}

}
